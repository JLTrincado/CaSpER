sum$FDR<- p.adjust(sum$Pvalue, 'fdr')
return (sum)
}
getDiffExprGenes <- function(final.objects, sampleName, chrs, event.type)
{
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
group1 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[1]] == event.type[1]))
group2 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[2]] == event.type[2]))
common <- intersect(group1, group2)
group1 <- group1[!(group1 %in% common)]
group2 <- group2[!(group2 %in% common)]
data <- final.objects[[1]]@data
caseind = which(colnames(data) %in% group1)
controlind = which(colnames(data) %in% group2)
eset = data[, c(caseind, controlind)]
TS = as.factor(c(rep("T", length(caseind)), rep("C",
length(controlind))))
design = model.matrix(~0 + TS)
colnames(design) = c("C", "T")
fit = lmFit(eset, design)
cont.matrix = makeContrasts(comp = T - C, levels = design)
fit2 = contrasts.fit(fit, cont.matrix)
contrasts.fit = eBayes(fit2)
print("Calculating differential expression...")
lods<-contrasts.fit$lods
colnames(lods)<-"lods"
all.summary<-topTable(contrasts.fit,n=Inf,adjust="BH",
sort.by="none",coef=1)
all.summary<-all.summary[match(rownames(lods),rownames(all.summary)),]
all.summary<-data.frame(ID=rownames(all.summary),all.summary,lods)
results <- merge(all.summary, final.objects[[1]]@annotation.filt, by.x="ID", by.y="Gene", all.x=T, all.y=F)
return(results)
}
generateEnrichmentSummary <- function(results, fileName)
{
genes <- as.character(results$ID[results$adj.P.Val<0.05])
entrez.id <-as.vector(unique(na.omit(unlist(mget (genes,org.Hs.egALIAS2EG,ifnotfound=NA)))))
universe.id <- as.vector(unique(na.omit(unlist(as.list(org.Hs.egALIAS2EG)))))
go.BP<-go.enrichment.BP(genes=entrez.id , ontology="BP",universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
go.MF<-go.enrichment.MF(genes=entrez.id,
ontology="MF", universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
kegg<-kegg.enrichment(genes=entrez.id,universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', genes2=genes)
write.xlsx(results, file=fileName, sheetName="sheet1", row.names=FALSE)
write.xlsx(go.BP, file=fileName, sheetName="sheet2", append=TRUE, row.names=FALSE)
write.xlsx(go.MF, file=fileName, sheetName="sheet3", append=TRUE, row.names=FALSE)
write.xlsx(kegg, file=fileName, sheetName="sheet4", append=TRUE, row.names=FALSE)
}
# finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
# group1 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[1]] == event.type[1]))
# group2 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[2]] == event.type[2]))
# common <- intersect(group1, group2)
# group1 <- group1[!(group1 %in% common)]
# group2 <- group2[!(group2 %in% common)]
# data <- final.objects[[1]]@data
# p_val <- sapply(X = 1:nrow(x = data), FUN = function(x) {
#     return(wilcox.test(as.numeric(data[x, colnames(data) %in% group1]),as.numeric(data[x, colnames(data) %in% group2] ))$p.value)
# })
# genes.return <- rownames(x = data)
# to.return <- data.frame(p_val, adj.Pval=p.adjust(p_val, method="fdr"), row.names = genes.return)
# to.return[to.return$adj.Pval<0.05, ]
# na.omit(rownames(to.return)[to.return$adj.Pval<0.05])
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH26", chrs=c("1q", "22q"), event.type=c(1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
generateEnrichmentSummary (results=all.summary, fileName="1q22q.xlsx")
plotSingleCellLargeScaleEventHeatmap <- function(finalChrMat, sampleName, chrs) {
title <- paste0(sampleName, "_", paste0(chrs, collapse = "_"), sep = "")
finalChrMat <- finalChrMat[grep(sampleName, rownames(finalChrMat)), chrs]
ord <- hclust(dist(finalChrMat, method = "euclidean"))$order
plot.data <- melt(t(finalChrMat))
plot.data$value2 <- "neutral"
plot.data$value2[plot.data$value > 0] <- "amplification"
plot.data$value2[plot.data$value < 0] <- "deletion"
plot.data$value2 <- factor(plot.data$value2, levels = c("amplification", "deletion", "neutral"))
plot.data$X1 <- factor(plot.data$X1, levels = colnames(finalChrMat))
plot.data$X2 <- factor(plot.data$X2, levels = rev(rownames(finalChrMat)[ord]))
p <- ggplot(aes(x = X1, y = X2, fill = value2), data = plot.data)
p <- p + geom_tile(size = 0.01) + labs(x = "", y = "") + scale_fill_manual(values = c(amplification = muted("red"), deletion = muted("blue"),
neutral = "white")) + theme_grey(base_size = 6) + ggtitle(title) + theme(legend.position = "none", legend.direction = "vertical",
legend.title = element_blank(), strip.text.x = element_blank(), legend.text = element_text(colour = "black", size = 7,
face = "bold"), legend.key.height = grid::unit(0.8, "cm"), legend.key.width = grid::unit(0.5, "cm"), axis.text.x = element_text(size = 6,
colour = "black", angle = -45, hjust = 0), axis.text.y = element_text(size = 2, vjust = 0.2, colour = "black"),
axis.ticks = element_line(size = 0.4), plot.title = element_text(colour = "black", hjust = 0, size = 6, face = "bold"))
ggsave(paste0(title, ".pdf"), plot = p, width = 1, height = 3)
}
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("8q", "20p"))
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH28", chrs=c("5q", "19q"), event.type=c(1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
generateEnrichmentSummary (results=all.summary, fileName="5q19q.xlsx")
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH29", chrs=c("10p", "4p"), event.type=c(-1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
generateEnrichmentSummary (results=all.summary, fileName="10p4p.xlsx")
genes
library(KEGG)
biocLite("KEGG")
source("https://bioconductor.org/biocLite.R")
biocLite("KEGG.db")
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH28", chrs=c("5q", "19q"), event.type=c(1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
generateEnrichmentSummary (results=all.summary, fileName="5q19q.xlsx")
library(biomart)
install.packages(biomart)
library(biomaRt)
library(GSA)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
library(randomForest)
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_uthealth\\singleCell\\clusterSCell\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
##assay(data.SKCM)[1,]
biomarkers <- unique(as.vector(unlist(geneset.obj$genesets)))
library(GSA)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
library(randomForest)
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_uthealth\\SCell_ProcessedData\\clusterSCell\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_uthealth\\SCell_ProcessedData\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
library(GSA)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
library(randomForest)
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_uthealth\\SCell_ProcessedData\\TCGA\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
library(GSA)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
library(randomForest)
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\TCGA\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
##assay(data.SKCM)[1,]
biomarkers <- unique(as.vector(unlist(geneset.obj$genesets)))
biomarkers
unique(biomarkers)
geneset.obj$genesets
geneset.obj
unique(biomarkers)
##assay(data.SKCM)[1,]
biomarkers <- unique(as.vector(unlist(geneset.obj$genesets)))
orig.clusters.melanoma <- read.delim(file="C:/Users/aharmanci/Google Drive/uthealth/SCell_ProcessedData/Melanoma/melanoma_cluster_assignment_portal.txt", stringsAsFactors=F, header=T)
orig.clusters.melanoma[,1] <- gsub("-", "_",as.character(orig.clusters.melanoma[,1]))
orig.clusters.melanoma<- orig.clusters.melanoma[-1, ]
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_uthealth\\singleCell\\clusterSCell\\melanoma.exp.data.rda")
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\TCGA\\melanoma.exp.data.rda")
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\melanoma.exp.data.rda")
### matc
melanoma.exp.data[1,]
dim(melanoma.exp.data
)
### match(orig.clusters.melanoma[,1],colnames(melanoma.exp.data)); sum(1:4645-match(orig.clusters.melanoma[,1],colnames(melanoma.exp.data) ))
biomarkers <- intersect(intersect(biomarkers,rownames(melanoma.exp.data)), rownames(assay(data.SKCM)))
datTrain<-melanoma.exp.data[match(unique(na.omit((biomarkers))),rownames(melanoma.exp.data)), orig.clusters.melanoma[,2]!="undefined"]
ctSubtype<-orig.clusters.melanoma[,2]
ctSubtype<- ctSubtype[ctSubtype!="undefined"]
groups<-as.character(ctSubtype)
groupNums<-as.factor(groups)
model <- randomForest(groupNums~ ., data=data.frame(t(datTrain)),method='class', ntree = 5000)
model
? OOB estimate of  error rate: 0.85%
?randomForest
library(keras)
library(dplyr)
library(ggplot2)
library(purrr)
install.packages("keras")
library(keras)
imdb <- dataset_imdb(num_words = 10000)
dataset_imdb
library(GSA)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
library(randomForest)
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\TCGA\\TCGA.rda")
geneset.obj<- GSA.read.gmt("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\signatures.txt")
##assay(data.SKCM)[1,]
biomarkers <- unique(as.vector(unlist(geneset.obj$genesets)))
orig.clusters.melanoma <- read.delim(file="C:/Users/aharmanci/Google Drive/uthealth/SCell_ProcessedData/Melanoma/melanoma_cluster_assignment_portal.txt", stringsAsFactors=F, header=T)
orig.clusters.melanoma[,1] <- gsub("-", "_",as.character(orig.clusters.melanoma[,1]))
orig.clusters.melanoma<- orig.clusters.melanoma[-1, ]
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\Melanoma\\melanoma.exp.data.rda")
### match(orig.clusters.melanoma[,1],colnames(melanoma.exp.data)); sum(1:4645-match(orig.clusters.melanoma[,1],colnames(melanoma.exp.data) ))
biomarkers <- intersect(intersect(biomarkers,rownames(melanoma.exp.data)), rownames(assay(data.SKCM)))
datTrain<-melanoma.exp.data[match(unique(na.omit((biomarkers))),rownames(melanoma.exp.data)), orig.clusters.melanoma[,2]!="undefined"]
ctSubtype<-orig.clusters.melanoma[,2]
ctSubtype<- ctSubtype[ctSubtype!="undefined"]
groups<-as.character(ctSubtype)
groupNums<-as.factor(groups)
datTrain[1,]
dim(datTrain)
write.csv(datTrain, "Melanoma.Train.csv")
groupNums
as.factor(groupNums)
as.numeric(as.factor(groupNums)
)
unique(as.numeric(as.factor(groupNums)
)
)
write.csv(as.numeric(as.factor(groupNums)), "C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_yale\\codebase_uthealth\\CNN\\Melanoma.TrainLabels.csv")
data <- assay(data.SKCM)
datTest<-data[match(na.omit(as.vector(unlist(biomarkers))),rownames(data)), ]
write.csv(datTest, "C:\\Users\\aharmanci\\Google Drive\\uthealth\\codebase_yale\\codebase_uthealth\\CNN\\Melanoma.Test.csv")
require(devtools)
install_github("akdess/CaSpER")
library(CaSpER)
library(CaSpER)
library('biomaRt')
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm_data")
## "hg19_cytoband.rda" contains the following objects:
## cytoband: hg19 cytoband information
## centromere: hg19 centromere information
load("hg19_cytoband")
## generate annotation data.frame
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
library(CaSpER)
library('biomaRt')
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm_data")
## "hg19_cytoband.rda" contains the following objects:
## cytoband: hg19 cytoband information
## centromere: hg19 centromere information
data("hg19_cytoband")
## generate annotation data.frame
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
data <- data[match( annotation$Gene,rownames(data)), ]
## create CaSpER object
object <- CreateCasperObject(raw.data=data, loh.name.mapping=loh.name.mapping,
sequencing.type="bulk", cnv.scale=3, loh.scale=3,method="iterative",
annotation=annotation, loh=loh,
control.sample.ids=control.sample.ids, cytoband=cytoband)
## runCaSpER
final.objects <- runCaSpER(object, removeCentromere=T, cytoband=cytoband, method="iterative")
## plot median filtered gene expression matrix
obj <- final.objects[[9]]
plotHeatmap(object, fileName="heatmap.png", cnv.scale= 3, cluster_cols = F, cluster_rows = T, show_rownames = T, only_soi = T)
## summarize large scale events
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
common <- intersect(order.sampleNames, intersect(rownames(finalChrMat), rownames(genoMat)))
finalChrMat <- finalChrMat[match(common, rownames(finalChrMat)), ]
genoMat <- genoMat[match(common, rownames(genoMat)), ]
## calculate TPR and FPR using genotyping array as gold standard
calcROC(chrMat=finalChrMat, chrMat2=genoMat)
#### VISUALIZATION
## plot large scale events
plotLargeScaleEvent (object=obj, fileName="large.scale.events.pdf")
## plot large scale events using event summary matrix 1: amplification, -1:deletion, 0: neutral
plotLargeScaleEvent2 (finalChrMat, fileName="large.scale.events.summarized.pdf")
## plot BAF deviation for each sample in seperate pages
plotBAFInSeperatePages (loh =obj@loh.median.filtered.data, folderName="LOHPlotsSeperate")
## plot gene expression and BAF signal for one sample in one plot
plotGEAndBAFOneSample (object=obj, cnv.scale=3, loh.scale=3, sample= "TCGA-02-0047-01A")
data[1,]
annotation[1,]
library(xlsx)
generateEnrichmentSummary
generateEnrichmentSummary()
library(CaSpER)
library('biomaRt')
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm_data")
## "hg19_cytoband.rda" contains the following objects:
## cytoband: hg19 cytoband information
## centromere: hg19 centromere information
data("hg19_cytoband")
## generate annotation data.frame
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
data <- data[match( annotation$Gene,rownames(data)), ]
annotation[1,]
library(CaSpER)
library('biomaRt')
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm_data")
data[1,]
rownames(data)
ls()
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/tcga_gbm_data.rda")
ls()
data[1,]
rm(list=ls())
data("tcga_gbm_data")
data[1,]
install_github("akdess/CaSpER")
rm(list=ls())
ls9)
ls()
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/hg19_cytoband.rda")
ls()
rm(list=ls())
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/sCell_gbm_data.rda")
ls()
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/yale_meningioma_data.rda")
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/tcga_gbm_data.rda")
ls()
rm(list=ls())
rm(list=ls())
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/yale_meningioma_data.rda")
ls()
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/sCell_gbm_data.rda")
scell_gbm <- list(annotation=annotation, data=data, loh=loh, loh.name.mapping=loh.name.mapping)
save("scell_gbm", file="C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/sCell_gbm.rda")
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/tcga_gbm_data.rda")
tcga_gbm <- list(annotation=annotation, data=data, loh=loh, loh.name.mapping=loh.name.mapping, control.sample.ids=control.sample.ids, genoMat=genoMat, samps=samps)
save("tcga_gbm", file="C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/tcga_gbm.rda")
load("C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/yale_meningioma_data.rda")
yale_meningioma <- list(annotation=annotation, control.sample.ids=control.sample.ids, data=data, loh=loh, loh.name.mapping=loh.name.mapping, genoMat=genoMat, samps=samps)
save("yale_meningioma", file="C:/Users/aharmanci/Google Drive/uthealth/codebase_yale/codebase_uthealth/CaSpER/data/yale_meningioma.rda")
scell_gbm$annotation[1,]
## loh
data("sCell_gbm")
data <- scell_gbm$data
loh <-  scell_gbm$loh
loh.name.mapping <-  scell_gbm$loh.name.mapping
library(CaSpER)
## "sCell_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
data("sCell_gbm")
data <- scell_gbm$data
loh <-  scell_gbm$loh
loh.name.mapping <-  scell_gbm$loh.name.mapping
## generate annotation data.frame
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
data <- data[match(annotation$Gene,rownames(data)), ]
## create CaSpER object
object <- CreateCasperObject(raw.data=data,loh.name.mapping=loh.name.mapping,
sequencing.type="single-cell",
cnv.scale=3, loh.scale=3,
annotation=annotation, method="iterative", loh=loh,
control.sample.ids="REF", cytoband=cytoband)
## runCaSpER
final.objects <- runCaSpER(object, removeCentromere=T, cytoband=cytoband, method="iterative")
## plot median filtered gene expression matrix
plotHeatmap(object, fileName="heatmap.png", cnv.scale= 3, cluster_cols = F, cluster_rows = T, show_rownames = T, only_soi = T)
## summarize large scale events
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
#### VISUALIZATION
## plot large scale events using event summary matrix 1: amplification, -1:deletion, 0: neutral
plotLargeScaleEvent2 (finalChrMat, fileName="large.scale.events.summarized.pdf")
## plot BAF deviation for all samples together in one plot (can be used only with small sample size)
plotBAFAllSamples (loh = obj@loh.median.filtered.data,  fileName="LOHAllSamples.png")
## plot BAF signal in different scales for all samples
plotBAFOneSample (object, fileName="LohPlotsAllScales.pdf")
## plot large scale event summary for selected sample and chromosomes
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("8q", "20p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
plotBAFAllSamples (loh = object@loh.median.filtered.data,  fileName="LOHAllSamples.png")
object@loh.median.filtered.data
names(final.objects
)
final.objects[[1]]@loh.median.filtered.data
plotBAFAllSamples (loh = final.objects[[1]]@loh.median.filtered.data,  fileName="LOHAllSamples.png")
plotBAFOneSample (object, fileName="LohPlotsAllScales.pdf")
## plot large scale event summary for selected sample and chromosomes
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("8q", "20p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
## calculate significant mutual exclusive and co-occurent events
results <- extractMUAndCooccurence (finalChrMat, loh, loh.name.mapping)
## visualize mutual exclusive and co-occurent events
plotMUAndCooccurence (results)
## visualize CNV pyhlogenetic tree
## first please download pyhlip package from http://evolution.genetics.washington.edu/phylip/getme-new1.html
#plotSCellCNVTree (finalChrMat, sampleName="MGH31", path="C:\\Users\\aharmanci\\Downloads\\phylip-3.695\\phylip-3.695\\exe", fileName="CNVTree.pdf")
rm(list=ls())
library(CaSpER)
library('biomaRt')
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm_data")
## "hg19_cytoband.rda" contains the following objects:
## cytoband: hg19 cytoband information
## centromere: hg19 centromere information
data("hg19_cytoband")
## generate annotation data.frame
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
data <- data[match( annotation$Gene,rownames(data)), ]
## create CaSpER object
object <- CreateCasperObject(raw.data=data, loh.name.mapping=loh.name.mapping,
sequencing.type="bulk", cnv.scale=3, loh.scale=3,method="iterative",
annotation=annotation, loh=loh,
control.sample.ids=control.sample.ids, cytoband=cytoband)
## runCaSpER
final.objects <- runCaSpER(object, removeCentromere=T, cytoband=cytoband, method="iterative")
## plot median filtered gene expression matrix
obj <- final.objects[[9]]
plotHeatmap(object, fileName="heatmap.png", cnv.scale= 3, cluster_cols = F, cluster_rows = T, show_rownames = T, only_soi = T)
## summarize large scale events
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
common <- intersect(order.sampleNames, intersect(rownames(finalChrMat), rownames(genoMat)))
finalChrMat <- finalChrMat[match(common, rownames(finalChrMat)), ]
genoMat <- genoMat[match(common, rownames(genoMat)), ]
## calculate TPR and FPR using genotyping array as gold standard
calcROC(chrMat=finalChrMat, chrMat2=genoMat)
#### VISUALIZATION
## plot large scale events
plotLargeScaleEvent (object=obj, fileName="large.scale.events.pdf")
## plot large scale events using event summary matrix 1: amplification, -1:deletion, 0: neutral
plotLargeScaleEvent2 (finalChrMat, fileName="large.scale.events.summarized.pdf")
## plot BAF deviation for each sample in seperate pages
plotBAFInSeperatePages (loh =obj@loh.median.filtered.data, folderName="LOHPlotsSeperate")
## plot gene expression and BAF signal for one sample in one plot
plotGEAndBAFOneSample (object=obj, cnv.scale=3, loh.scale=3, sample= "TCGA-02-0047-01A")
library(CaSpER)
## "tcga_gbm_data.rda" contains the following objects:
## data: normalized gene expression matrix
## loh.name.mapping: data.frame for mapping loh files to expression files
## annotation
## loh
## control.sample.ids: samples that are used as normal
## samps: sample information
## genoMat: genotyping large scale CNV event summary 1: amplification, -1:deletion, 0: neutral
data("tcga_gbm")
## "hg19_cytoband.rda" contains the following objects:
## cytoband: hg19 cytoband information
## centromere: hg19 centromere information
data("hg19_cytoband")
data <- tcga_gbm$data
loh <-  tcga_gbm$loh
loh.name.mapping <-  tcga_gbm$loh.name.mapping
control.sample.ids <-  tcga_gbm$control.sample.ids
genoMat <-  tcga_gbm$genoMat
samps <-  tcga_gbm$samps
annotation$Gene
rownames(data)
data[1,]
annotation <- generateAnnotation(id_type="hgnc_symbol", genes=rownames(data), ishg19=T, centromere)
annotation[1,]
data <- data[match( annotation$Gene,rownames(data)), ]
data[1,]
dim(data)
dim(annotattion)
dim(annotation)
object <- CreateCasperObject(raw.data=data, loh.name.mapping=loh.name.mapping,
sequencing.type="bulk", cnv.scale=3, loh.scale=3,method="iterative",
annotation=annotation, loh=loh,
control.sample.ids=control.sample.ids, cytoband=cytoband)
# runCaSpER
## this might take some time
final.objects <- runCaSpER(object, removeCentromere=T, cytoband=cytoband, method="iterative")
require(devtools)
install_github("akdess/CaSpER")
library(CaSpER)
