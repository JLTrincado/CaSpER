}
extractEvents <- function(segments, cytoband, type) {
sample_ids <- unique(segments$ID)
mat_focal_paired <- matrix(0, nrow = length(sample_ids), ncol = 46)
mat_large_paired <- matrix(0, nrow = length(sample_ids), ncol = 46)
colnames(mat_focal_paired) <- as.vector(sapply(c(1:22, "X"), function(x) c(paste(x, "p", sep = ""), paste(x, "q",
sep = ""))))
colnames(mat_large_paired) <- as.vector(sapply(c(1:22, "X"), function(x) c(paste(x, "p", sep = ""), paste(x, "q",
sep = ""))))
rownames(mat_focal_paired) <- sample_ids
rownames(mat_large_paired) <- sample_ids
arms <- paste(cytoband$V1, cytoband$V4, sep = "")
arm_sizes <- cytoband$V3 - cytoband$V2
for (i in 1:length(sample_ids)) {
k <- which(segments$ID == as.character(sample_ids[i]))
sub_segments <- segments[k, ]
sub_segments$chr <- as.character(sub_segments$chr)
uniq_arms <- unique(as.character(sub_segments$chr))
for (t in 1:length(uniq_arms)) {
t1 <- which(as.character(sub_segments$chr) == uniq_arms[t] & as.character(sub_segments$states2) == type)
armSize <- sum(sub_segments$size[t1], na.rm = T)
pair_arm_sizes <- arm_sizes[uniq_arms[t] == arms]
isLargeScale <- armSize >= (pair_arm_sizes * (1/3))
isFocalScale <- (armSize < pair_arm_sizes * (1/3)) & armSize >= (pair_arm_sizes * (1/10))
if (isFocalScale) {
mat_focal_paired[i, uniq_arms[t]] <- 1
}
if (isLargeScale) {
mat_large_paired[i, uniq_arms[t]] <- 1
}
}
}
result_focal <- apply(mat_focal_paired, 1, function(x) paste(colnames(mat_focal_paired)[which(x == 1)], collapse = " "))
result_large <- apply(mat_large_paired, 1, function(x) paste(colnames(mat_large_paired)[which(x == 1)], collapse = " "))
result_focal_number <- apply(mat_focal_paired, 1, function(x) length(which(x == 1)))
result_large_number <- apply(mat_large_paired, 1, function(x) length(which(x == 1)))
summary_events <- cbind(result_large, result_focal, result_large_number, result_focal_number)
return(summary_events)
}
start.time <- Sys.time()
final.objects <- runCaSPER(object, removeCentromere=T, cytoband=cytoband, method="iterative")
removeCentromere=T
cytoband=cytoband
final.objects <- list()
message("Performing HMM segmentation..." )
for (i in 1:object@cnv.scale) {
cnv.list[[i]] <- PerformSegmentationWithHMM(object, cnv.scale = i, removeCentromere = T,
cytoband=cytoband)
}
PerformSegmentationWithHMM
i
cnv.scale <- 1
object <- generateParam(object, scale = cnv.scale)
data <- object@control.normalized[[cnv.scale]]
annotation <- object@annotation.filt
if (removeCentromere) {
isCentromer <- annotation$isCentromer == "no"
data <- data[isCentromer, ]
annotation <- annotation[isCentromer, ]
}
segments <- NULL
for (i in 1:dim(data)[2]) {
rdata <- RangedData(IRanges(start = annotation$start, end = annotation$end), space = annotation$cytoband, copy = data[,
i])
hmm.segments <- HMMsegment(rdata, param = object@hmmparam, verbose = F)
segments <- rbind(segments, data.frame(ID = colnames(data)[i], hmm.segments$segs))
}
HMMsegment
manualSegment
data[1,]
load("./data/tcga_gbm_data.rda")
ls()
dim(data)
load("./data/yale_meningioma_data.rda")
ls()
dim(data)
samps
load("./data/tcga_gbm_data.rda")
ls()
load("./data/sCell_gbm_data.rda")
ls()
dim(data)
samps
dim(data)
ls()
names(loh)
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
finalChrMat
plotSingleCellLargeScaleEventHeatmap <- function(finalChrMat, sampleName, chrs) {
title <- paste0(sampleName, "_", paste0(chrs, collapse = "_"), sep = "")
finalChrMat <- finalChrMat[grep(sampleName, rownames(finalChrMat)), chrs]
ord <- hclust(dist(finalChrMat, method = "euclidean"))$order
plot.data <- melt(t(finalChrMat))
plot.data$value2 <- "neutral"
plot.data$value2[plot.data$value > 0] <- "amplification"
plot.data$value2[plot.data$value < 0] <- "deletion"
plot.data$value2 <- factor(plot.data$value2, levels = c("amplification", "deletion", "neutral"))
plot.data$X1 <- factor(plot.data$X1, levels = colnames(finalChrMat))
plot.data$X2 <- factor(plot.data$X2, levels = rev(rownames(finalChrMat)[ord]))
p <- ggplot(aes(x = X1, y = X2, fill = value2), data = plot.data)
p <- p + geom_tile(size = 0.01) + labs(x = "", y = "") + scale_fill_manual(values = c(amplification = muted("red"), deletion = muted("blue"),
neutral = "white")) + theme_grey(base_size = 6) + ggtitle(title) + theme(legend.position = "none", legend.direction = "vertical",
legend.title = element_blank(), strip.text.x = element_blank(), legend.text = element_text(colour = "black", size = 7,
face = "bold"), legend.key.height = grid::unit(0.8, "cm"), legend.key.width = grid::unit(0.5, "cm"), axis.text.x = element_text(size = 6,
colour = "black", angle = -45, hjust = 0), axis.text.y = element_text(size = 2, vjust = 0.2, colour = "black"),
axis.ticks = element_line(size = 0.4), plot.title = element_text(colour = "black", hjust = 0, size = 6, face = "bold"))
ggsave(paste0(title, ".png"), plot = p, width = 1, height = 3)
}
load("./data/sCell_gbm_data.rda")
load("C:\\Users\\aharmanci\\Google Drive\\uthealth\\SCell_ProcessedData\\LOH_Ozgunum_MAPQ50\\single.cell.gbm.withBrain.MedianValues_v2.rda")
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
##
library(CaSpER)
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
##
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH29", chrs=c("10p", "4p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH30", chrs=c("6p", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH31", chrs=c("5p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("10p", "14q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH28", chrs=c("5q", "19q"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("5q", "7p"))
plotSingleCellLargeScaleEventHeatmap(finalChrMat, sampleName="MGH26", chrs=c("1q", "22q"))
calcROC <- function(chrMat, chrMat2) {
chrMatPos <- chrMat
chrMatPos[chrMatPos < 0] <- 0
chrMatNeg <- chrMat
chrMatNeg[chrMatNeg > 0] <- 0
chrMatPos2 <- chrMat2
chrMatPos2[chrMatPos2 < 0] <- 0
chrMatNeg2 <- chrMat2
chrMatNeg2[chrMatNeg2 > 0] <- 0
tp <- sum(chrMat * chrMat2)
all_pos <- sum(apply(chrMat2, 2, function(x) length(which(!x == 0))))
recall <- tp/all_pos
all_pred_pos <- sum(apply(chrMat, 2, function(x) length(which(!x == 0))))
fp <- all_pred_pos - tp
if (fp < 0)
fp <- 0
all_neg <- sum(apply(chrMat2, 2, function(x) length(which(x == 0))))
fallout <- fp/all_neg
# positive
tp <- sum(chrMatPos * chrMatPos2)
all_pos <- sum(apply(chrMatPos2, 2, function(x) length(which(!x == 0))))
recallAmp <- tp/all_pos
all_pred_pos <- sum(apply(chrMatPos, 2, function(x) length(which(!x == 0))))
fp <- all_pred_pos - tp
if (fp < 0)
fp <- 0
all_neg <- sum(apply(chrMatPos2, 2, function(x) length(which(x == 0))))
falloutAmp <- fp/all_neg
tp <- sum(chrMatNeg * chrMatNeg2)
all_pos <- sum(apply(chrMatNeg2, 2, function(x) length(which(!x == 0))))
recallDel <- tp/all_pos
all_pred_pos <- sum(apply(chrMatNeg, 2, function(x) length(which(!x == 0))))
fp <- all_pred_pos - tp
if (fp < 0)
fp <- 0
all_neg <- sum(apply(chrMatNeg2, 2, function(x) length(which(x == 0))))
falloutDel <- fp/all_neg
list(tpr = recall, fpr = fallout, tprAmp = recallAmp, fprAmp = falloutAmp, tprDel = recallDel, fprDel = falloutDel)
}
plotROC <- function(roc, threshold, cost_of_fp, cost_of_fn) {
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold - threshold))
col_ramp <- colorRampPalette(c("green", "orange", "red", "black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost) * 99) + 1]
p_roc <- ggplot(roc, aes(fpr, tpr)) + geom_line(color = rgb(0, 0, 1, alpha = 0.3)) + coord_fixed() + geom_line(aes(threshold,
threshold), color = rgb(0, 0, 1, alpha = 0.5)) + labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") + geom_hline(yintercept = roc[idx_threshold,
"tpr"], alpha = 0.5, linetype = "dashed") + geom_vline(xintercept = roc[idx_threshold, "fpr"], alpha = 0.5, linetype = "dashed")
}
extractMUAndCooccurence <- function(finalChrMat, loh, loh.name.mapping) {
results <- list()
chrs <- colnames(finalChrMat)
for (j in 1:length(names(loh))) {
samples <- as.character(loh.name.mapping[loh.name.mapping$loh.name %in% names(loh)[j], 2])
finalChrMat.sub <- finalChrMat[rownames(finalChrMat) %in% samples, ]
combin <- expand.grid(paste0(chrs, "del"), paste0(chrs, "del"))
list.names <- apply(combin, 1, function(x) paste(x[1], x[2], sep = "_vs_"))
filter <- c(paste0(chrs, "del_vs_", chrs, "del"), paste0(chrs[seq(1, 44, by = 2)], "del_vs_", chrs[seq(2, 44, by = 2)],
"del"), paste0(chrs[seq(2, 44, by = 2)], "del_vs_", chrs[seq(1, 44, by = 2)], "del"))
combin <- combin[!(list.names %in% filter), ]
list.names <- list.names[!(list.names %in% filter)]
occurenceDel <- matrix("NA", nrow = nrow(combin), ncol = 4)
rownames(occurenceDel) <- list.names
colnames(occurenceDel) <- c("bothDelOccurencePval", "bothDelOccurenceFDR", "bothDelMUPval", "bothDelMUFDR")
finalChrMat.sub[finalChrMat.sub > 0] <- 0
finalChrMat.sub[finalChrMat.sub < 0] <- 1
occurenceDel <- data.frame(occurenceDel, stringsAsFactors = F)
for (i in 1:nrow(combin)) {
a1 <- finalChrMat.sub[, combin[i, 1]]
a2 <- finalChrMat.sub[, combin[i, 2]]
if (dim(table(a1, a2))[1] > 1 & dim(table(a1, a2))[2] > 1) {
occurenceDel[i, 1] <- fisher.test(table(a1, a2), alternative = "greater")$p.val
occurenceDel[i, 3] <- fisher.test(table(a1, a2), alternative = "less")$p.val
}
}
occurenceDel[, 2] <- p.adjust(as.numeric(occurenceDel[, 1]), method = "fdr")
occurenceDel[, 4] <- p.adjust(as.numeric(occurenceDel[, 3]), method = "fdr")
combin <- expand.grid(paste0(chrs, "amp"), paste0(chrs, "amp"))
list.names <- apply(combin, 1, function(x) paste(x[1], x[2], sep = "_vs_"))
filter <- c(paste0(chrs, "amp_vs_", chrs, "amp"), paste0(chrs[seq(1, 44, by = 2)], "amp_vs_", chrs[seq(2, 44, by = 2)],
"amp"), paste0(chrs[seq(2, 44, by = 2)], "amp_vs_", chrs[seq(1, 44, by = 2)], "amp"))
combin <- combin[!(list.names %in% filter), ]
list.names <- list.names[!(list.names %in% filter)]
occurenceAmp <- matrix("NA", nrow = nrow(combin), ncol = 4)
rownames(occurenceAmp) <- list.names
colnames(occurenceAmp) <- c("bothAmpOccurencePval", "bothAmpOccurenceFDR", "bothAmpMUPval", "bothAmpMUFDR")
finalChrMat.sub.2 <- finalChrMat[grep(names(loh)[j], rownames(finalChrMat)), ]
finalChrMat.sub.2[finalChrMat.sub.2 < 0] <- 0
for (i in 1:nrow(combin)) {
a1 <- finalChrMat.sub.2[, combin[i, 1]]
a2 <- finalChrMat.sub.2[, combin[i, 2]]
if (dim(table(a1, a2))[1] > 1 & dim(table(a1, a2))[2] > 1) {
occurenceAmp[i, 1] <- fisher.test(table(a1, a2), alternative = "greater")$p.val
occurenceAmp[i, 3] <- fisher.test(table(a1, a2), alternative = "less")$p.val
}
}
occurenceAmp[, 2] <- p.adjust(as.numeric(occurenceAmp[, 1]), method = "fdr")
occurenceAmp[, 4] <- p.adjust(as.numeric(occurenceAmp[, 3]), method = "fdr")
combin <- expand.grid(paste0(chrs, "del"), paste0(chrs, "amp"))
list.names <- apply(combin, 1, function(x) paste(x[1], x[2], sep = "_vs_"))
filter <- c(paste0(chrs, "del_vs_", chrs, "amp"), paste0(chrs[seq(1, 44, by = 2)], "del_vs_", chrs[seq(2, 44, by = 2)],
"amp"), paste0(chrs[seq(2, 44, by = 2)], "del_vs_", chrs[seq(1, 44, by = 2)], "amp"))
combin <- combin[!(list.names %in% filter), ]
list.names <- list.names[!(list.names %in% filter)]
occurenceAmpDel <- matrix("NA", nrow = nrow(combin), ncol = 4)
rownames(occurenceAmpDel) <- list.names
colnames(occurenceAmpDel) <- c("DelAmpOccurencePval", "DelAmpOccurenceFDR", "DelAmpMUPval", "DelAmpMUFDR")
for (i in 1:nrow(combin)) {
a1 <- finalChrMat.sub[, combin[i, 1]]
a2 <- finalChrMat.sub.2[, combin[i, 2]]
if (dim(table(a1, a2))[1] > 1 & dim(table(a1, a2))[2] > 1) {
occurenceAmpDel[i, 1] <- fisher.test(table(a1, a2), alternative = "greater")$p.val
occurenceAmpDel[i, 3] <- fisher.test(table(a1, a2), alternative = "less")$p.val
}
}
occurenceAmpDel[, 2] <- p.adjust(as.numeric(occurenceAmpDel[, 1]), method = "fdr")
occurenceAmpDel[, 4] <- p.adjust(as.numeric(occurenceAmpDel[, 3]), method = "fdr")
combin <- expand.grid(paste0(chrs, "amp"), paste0(chrs, "del"))
list.names <- apply(combin, 1, function(x) paste(x[1], x[2], sep = "_vs_"))
filter <- c(paste0(chrs, "amp_vs_", chrs, "del"), paste0(chrs[seq(1, 44, by = 2)], "amp_vs_", chrs[seq(2, 44, by = 2)],
"del"), paste0(chrs[seq(2, 44, by = 2)], "amp_vs_", chrs[seq(1, 44, by = 2)], "del"))
combin <- combin[!(list.names %in% filter), ]
list.names <- list.names[!(list.names %in% filter)]
occurenceDelAmp <- matrix("NA", nrow = nrow(combin), ncol = 4)
rownames(occurenceDelAmp) <- list.names
colnames(occurenceDelAmp) <- c("DelAmpOccurencePval", "DelAmpOccurenceFDR", "DelAmpMUPval", "DelAmpMUFDR")
for (i in 1:nrow(combin)) {
a1 <- finalChrMat.sub.2[, combin[i, 1]]
a2 <- finalChrMat.sub[, combin[i, 2]]
if (dim(table(a1, a2))[1] > 1 & dim(table(a1, a2))[2] > 1) {
occurenceDelAmp[i, 1] <- fisher.test(table(a1, a2), alternative = "greater")$p.val
occurenceDelAmp[i, 3] <- fisher.test(table(a1, a2), alternative = "less")$p.val
}
}
occurenceDelAmp[, 2] <- p.adjust(as.numeric(occurenceDelAmp[, 1]), method = "fdr")
occurenceDelAmp[, 4] <- p.adjust(as.numeric(occurenceDelAmp[, 3]), method = "fdr")
mat <- rbind(data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceDel), split = "_vs_"), function(x) x[1])),
Node2 = unlist(lapply(strsplit(rownames(occurenceDel), split = "_vs_"), function(x) x[2])), Pval = occurenceDel[,
1], FDR = occurenceDel[, 2], type = "occurence"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceDel),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceDel), split = "_vs_"), function(x) x[2])),
Pval = occurenceDel[, 3], FDR = occurenceDel[, 4], type = "MU"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceAmp),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceAmp), split = "_vs_"), function(x) x[2])),
Pval = occurenceAmp[, 1], FDR = occurenceAmp[, 2], type = "occurence"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceAmp),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceAmp), split = "_vs_"), function(x) x[2])),
Pval = occurenceAmp[, 3], FDR = occurenceAmp[, 4], type = "MU"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceAmpDel),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceAmpDel), split = "_vs_"),
function(x) x[2])), Pval = occurenceAmpDel[, 1], FDR = occurenceAmpDel[, 2], type = "occurence"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceAmpDel),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceAmpDel), split = "_vs_"),
function(x) x[2])), Pval = occurenceAmpDel[, 3], FDR = occurenceAmpDel[, 4], type = "MU"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceDelAmp),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceDelAmp), split = "_vs_"),
function(x) x[2])), Pval = occurenceDelAmp[, 1], FDR = occurenceDelAmp[, 2], type = "occurence"), data.frame(Node1 = unlist(lapply(strsplit(rownames(occurenceDelAmp),
split = "_vs_"), function(x) x[1])), Node2 = unlist(lapply(strsplit(rownames(occurenceDelAmp), split = "_vs_"),
function(x) x[2])), Pval = occurenceDelAmp[, 3], FDR = occurenceDelAmp[, 4], type = "MU"))
mat[, 3] <- as.numeric(as.character(mat[, 3]))
mat[, 1] <- as.character(mat[, 1])
mat[, 2] <- as.character(mat[, 2])
results[[j]] <- mat
}
names(results) <- names(loh)
return(results)
}
generateAnnotation <- function(id_type = "ensembl_gene_id", genes, ishg19, centromere) {
## generate annotation data.frame
if (ishg19) {
mart <- useDataset("hsapiens_gene_ensembl", useEnsembl(biomart = "ensembl", GRCh = 37))
} else {
mart <- useDataset("hsapiens_gene_ensembl", useEnsembl(biomart = "ensembl"))
}
G_list <- getBM(filters = id_type, attributes = c(id_type, "hgnc_symbol", "entrezgene", "chromosome_name", "start_position", "end_position",
"band"), values = genes, mart = mart)
common <- intersect(genes, G_list[, id_type])
ord <- match(common, G_list[, id_type])
annotation <- G_list[ord, ]
annotation <- annotation[order(annotation$start_position), ]
annotation$cytoband <- paste0(annotation$chromosome_name, substr(unique(annotation$band), 0, 1))
chr.list <- as.character(1:22, "X")
idx <- unlist(unique(as.vector(sapply(chr.list, function(x) as.vector(unlist(which(as.character(annotation$chromosome_name) ==
x)))))))
annotation <- as.data.frame(annotation[idx, ])
colnames(annotation)[c(1:6, 8)] <- c("Gene", "GeneSymbol", "EntrezID", "Chr", "start", "end", "cytoband")
annotation$isCentromer <- rep("no", nrow(annotation))
centromere_snps <- NULL
for (k in 1:(dim(centromere)[1])) {
annotation$isCentromer[which(as.character(annotation$Chr) == gsub("chr", "", as.character(centromere$V1[k])) & (as.numeric(as.character(annotation$Position)) >=
centromere$V2[k] & as.numeric(as.character(annotation$Position)) <= centromere$V3[k]))] <- "yes"
}
annotation$Position <- (as.numeric(annotation$start) + as.numeric(annotation$end))/2
annotation$new_positions <- as.vector(unlist(lapply(lapply(split(annotation$cytoband, annotation$cytoband), length)[unique(annotation$cytoband)],
function(x) 1:x)))
return(annotation)
}
go.enrichment.BP<-function (genes, ontology, universe=character(0),
pvalue=0.05, annotation='org.Hs.eg.db', conditionalSearch=TRUE,genes2)
{
params = new ("GOHyperGParams", geneIds=unique(genes),  ontology="BP",
annotation='org.Hs.eg.db',
universeGeneIds=unique(universe), pvalueCutoff = pvalue,
conditional=TRUE,
testDirection = "over")
hgr <- hyperGTest (params)
tab<-summary(hgr)
geneIdsByCategory(hgr)
geneSymbol.list<-sapply(tab$GOBPID,function(x){
entrezIds<-geneIdsByCategory(hgr)[[x]]
gs <-as.vector(unique(na.omit(unlist(mget (entrezIds,revmap(org.Hs.egALIAS2EG),ifnotfound=NA)))))
paste(intersect(genes2, gs),collapse=",")})
sum<-cbind(tab,genes=as.vector(geneSymbol.list))
sum$FDR<- p.adjust(sum$Pvalue, 'fdr')
return (sum)
}
# -------------------------------------------------------------------
# GO MF enrichment
#
# -------------------------------------------------------------------
go.enrichment.MF<-function (genes, ontology, universe=character(0),
pvalue=0.05, annotation='org.Hs.eg.db', conditionalSearch=TRUE,genes2)
{
params = new ("GOHyperGParams", geneIds=unique(genes),  ontology="MF",
annotation='org.Hs.eg.db',
universeGeneIds=unique(universe), pvalueCutoff =pvalue,
conditional=TRUE,
testDirection = "over")
hgr <- hyperGTest (params)
tab<-summary(hgr)
geneIdsByCategory(hgr)
geneSymbol.list<-sapply(tab$GOMFID,function(x){
entrezIds<-geneIdsByCategory(hgr)[[x]]
gs <-as.vector(unique(na.omit(unlist(mget (entrezIds,revmap(org.Hs.egALIAS2EG),ifnotfound=NA)))))
paste(intersect(genes2, gs),collapse=",")})
sum<-cbind(tab,genes=as.vector(geneSymbol.list))
sum$FDR<- p.adjust(sum$Pvalue, 'fdr')
return (sum)
}
# -------------------------------------------------------------------
# KEGG enrichment
#
# -------------------------------------------------------------------
kegg.enrichment<-function (genes, universe=character(0),
pvalue=0.05, annotation='org.Hs.eg.db',genes2)
{
params = new ("KEGGHyperGParams", geneIds=genes,
annotation=annotation,
universeGeneIds=universe, pvalueCutoff = pvalue,
testDirection = "over")
hgr <- hyperGTest (params)
tab<-summary(hgr)
geneIdsByCategory(hgr)
geneSymbol.list<-sapply(tab$KEGGID,function(x){
entrezIds<-geneIdsByCategory(hgr)[[x]]
gs <-as.vector(unique(na.omit(unlist(mget (entrezIds,revmap(org.Hs.egALIAS2EG),ifnotfound=NA)))))
paste(intersect(genes2, gs),collapse=",")})
sum<-cbind(tab,genes=as.vector(geneSymbol.list))
sum$FDR<- p.adjust(sum$Pvalue, 'fdr')
return (sum)
}
getDiffExprGenes <- function(final.objects, sampleName, chrs, event.type)
{
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
group1 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[1]] == event.type[1]))
group2 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[2]] == event.type[2]))
common <- intersect(group1, group2)
group1 <- group1[!(group1 %in% common)]
group2 <- group2[!(group2 %in% common)]
data <- final.objects[[1]]@data
caseind = which(colnames(data) %in% group1)
controlind = which(colnames(data) %in% group2)
eset = data[, c(caseind, controlind)]
TS = as.factor(c(rep("T", length(caseind)), rep("C",
length(controlind))))
design = model.matrix(~0 + TS)
colnames(design) = c("C", "T")
fit = lmFit(eset, design)
cont.matrix = makeContrasts(comp = T - C, levels = design)
fit2 = contrasts.fit(fit, cont.matrix)
contrasts.fit = eBayes(fit2)
print("Calculating differential expression...")
lods<-contrasts.fit$lods
colnames(lods)<-"lods"
all.summary<-topTable(contrasts.fit,n=Inf,adjust="BH",
sort.by="none",coef=1)
all.summary<-all.summary[match(rownames(lods),rownames(all.summary)),]
all.summary<-data.frame(ID=rownames(all.summary),all.summary,lods)
results <- merge(all.summary, final.objects[[1]]@annotation.filt, by.x="ID", by.y="Gene", all.x=T, all.y=F)
return(results)
}
generateEnrichmentSummary <- function(results, fileName)
{
genes <- as.character(results$ID[results$adj.P.Val<0.05])
entrez.id <-as.vector(unique(na.omit(unlist(mget (genes,org.Hs.egALIAS2EG,ifnotfound=NA)))))
universe.id <- as.vector(unique(na.omit(unlist(as.list(org.Hs.egALIAS2EG)))))
go.BP<-go.enrichment.BP(genes=entrez.id , ontology="BP",universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
go.MF<-go.enrichment.MF(genes=entrez.id,
ontology="MF", universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
kegg<-kegg.enrichment(genes=entrez.id,universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', genes2=genes)
write.xlsx(results, file=fileName, sheetName="sheet1", row.names=FALSE)
write.xlsx(go.BP, file=fileName, sheetName="sheet2", append=TRUE, row.names=FALSE)
write.xlsx(go.MF, file=fileName, sheetName="sheet3", append=TRUE, row.names=FALSE)
write.xlsx(kegg, file=fileName, sheetName="sheet4", append=TRUE, row.names=FALSE)
}
# finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75)
# group1 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[1]] == event.type[1]))
# group2 <- names(which(finalChrMat[grep(sampleName, rownames(finalChrMat)),chrs[2]] == event.type[2]))
# common <- intersect(group1, group2)
# group1 <- group1[!(group1 %in% common)]
# group2 <- group2[!(group2 %in% common)]
# data <- final.objects[[1]]@data
# p_val <- sapply(X = 1:nrow(x = data), FUN = function(x) {
#     return(wilcox.test(as.numeric(data[x, colnames(data) %in% group1]),as.numeric(data[x, colnames(data) %in% group2] ))$p.value)
# })
# genes.return <- rownames(x = data)
# to.return <- data.frame(p_val, adj.Pval=p.adjust(p_val, method="fdr"), row.names = genes.return)
# to.return[to.return$adj.Pval<0.05, ]
# na.omit(rownames(to.return)[to.return$adj.Pval<0.05])
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH26", chrs=c("1q", "22q"), event.type=c(1, -1))
library(limma)
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH26", chrs=c("1q", "22q"), event.type=c(1, -1))
genes <- as.character(results$ID[results$adj.P.Val<0.05])
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
genes
install.packages("xlsx")
generateEnrichmentSummary (results=all.summary, fileName="1q22q.xlsx")
install.packages("org.Hs.eg.db")
install.packages("org.Hs.eg")
biocLite("org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
biocLite("GO.db")
source("https://bioconductor.org/biocLite.R")
biocLite("GOStats")
source("https://bioconductor.org/biocLite.R")
biocLite("GOstats")
generateEnrichmentSummary (results=all.summary, fileName="1q22q.xlsx")
library(org.Hs.eg.db)
library(GO.db)
library(GOstats)
generateEnrichmentSummary (results=all.summary, fileName="1q22q.xlsx")
library(xlsx)
results=all.summary
genes <- as.character(results$ID[results$adj.P.Val<0.05])
entrez.id <-as.vector(unique(na.omit(unlist(mget (genes,org.Hs.egALIAS2EG,ifnotfound=NA)))))
universe.id <- as.vector(unique(na.omit(unlist(as.list(org.Hs.egALIAS2EG)))))
go.BP<-go.enrichment.BP(genes=entrez.id , ontology="BP",universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
go.MF<-go.enrichment.MF(genes=entrez.id,
ontology="MF", universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
kegg<-kegg.enrichment(genes=entrez.id,universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', genes2=genes)
go.BP
go.MF
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH28", chrs=c("5q", "19q"), event.type=c(1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
genes
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH29", chrs=c("10p", "4p"), event.type=c(-1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
genes
all.summary <- getDiffExprGenes(final.objects,  sampleName="MGH28", chrs=c("5q", "19q"), event.type=c(1, -1))
genes <- as.character(all.summary$ID[all.summary$adj.P.Val<0.05])
genes
results <- all.summary
genes <- as.character(results$ID[results$adj.P.Val<0.05])
entrez.id <-as.vector(unique(na.omit(unlist(mget (genes,org.Hs.egALIAS2EG,ifnotfound=NA)))))
universe.id <- as.vector(unique(na.omit(unlist(as.list(org.Hs.egALIAS2EG)))))
go.BP<-go.enrichment.BP(genes=entrez.id , ontology="BP",universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
go.MF<-go.enrichment.MF(genes=entrez.id,
ontology="MF", universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', conditionalSearch=TRUE, genes2=genes)
kegg<-kegg.enrichment(genes=entrez.id,universe=universe.id,
pvalue=0.01, annotation='org.Hs.eg.db', genes2=genes)
go.BP
